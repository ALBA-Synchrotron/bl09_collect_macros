# -*- coding: utf-8 -*-

import sys


"""
This module is used as a library for BL09 macros used for creating TXM scripts.

"""

class GenericTXMcommands(object):
    """Generic TXM commands.

    The methods in this class will allow to create generic TXM commands,
    which will be included in the scripts generated by the macros using this
    library. The macros using this library creates scripts in .txt format,
    which are entered in TXM-XMController software in order to perform the
    data collection of ALBA BL09 TXM microscope.

    Coordinate system of the TXM (transmission X-ray Microscope) is:
    - Z in the direction of the beam
    - Y in the vertical direction
    - X perpendicular to Y and Z.
    """

    def __init__(self, file_name=None, current_sample_name=None,
                 current_zone_plate=None, current_theta=None,
                 current_energy=None, repetitions=None):
        self.file_name = file_name
        self.current_sample_name = current_sample_name
        self.current_zone_plate = current_zone_plate
        self.current_theta = current_theta
        self.current_energy = current_energy
        self._repetitions = repetitions

    def setBinning(self, binning=1):
        self.destination.write('setbinning %d\n' % binning)

    def moveX(self, x):
        self.destination.write('moveto X %6.2f\n' % x)

    def moveY(self, y):
        self.destination.write('moveto Y %6.2f\n' % y)

    def moveZ(self, z):
        self.destination.write('moveto Z %6.2f\n' % z)

    def moveZonePlateZ(self, zone_plate):
        self.current_zone_plate = zone_plate
        self.destination.write('moveto ZPz %6.2f\n' % zone_plate)

    def moveTheta(self, theta):
        self.current_theta = theta
        self.destination.write('moveto T %6.2f\n' % theta)

    def moveDetector(self, detector):
        self.destination.write('moveto detz %6.2f\n' % detector)

    def moveEnergy(self, energy):
        self.current_energy = energy
        self.destination.write('moveto energy %6.2f\n' % energy)

    def setExpTime(self, exp_time):
        self.destination.write('setexp %6.1f\n' % exp_time)

    def wait(self, wait_time):
        self.destination.write('wait %s\n' % wait_time)

    def generate(self):
        if self.file_name is None:
            destination = sys.stdout
        else:
            destination = open(self.file_name, 'w')
        with destination as self.destination:
            self.collectData()